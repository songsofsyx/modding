humanoid.ai.crime.Murder: {
	verb: "Murdering",
},
humanoid.ai.crime.Theft: {
	Thieving: "Thieving",
},
humanoid.HTYPE: {
	Subject: "Subject",
	Subjects: "Subjects",
	SubjectD: "Subjects are the bulk of your population and will carry out your wishes.",
	Criminal: "Criminal",
	Criminals: "Criminals",
	CriminalD: "Criminals don't work, but spends their days doing mischief. Should be dealt with quickly.",
	Invador: "Invador",
	Invadors: "Invadors",
	InvadorD: "Invadors is a force bent on conquer your city",
	Nobility: "Nobility",
	Nobles: "Nobles",
	NobilityD: "The nobility are above the commin plebs. Do not work in a traditional sense and require the best of services.",
},
game.faction.FactionStats: {
	In: "in",
	InDesc: "Yearly mount gained",
	InProduced: "Produced",
	InProducedD: "How much gained through production, mining and extraction.",
	InImported: "Imported",
	InImportedD: "How much gained through imports.",
	InTaxes: "Taxes",
	InTaxesD: "How much gained through taxed regions.",
	InTribute: "Tribute",
	InTributeD: "How much gained through payment of other factions.",
	Out: "Out",
	OutDesc: "Yearly amount lost",
	OutConsumed: "Consumed",
	OutConsumedD: "How much loss through consumption.",
	OutExported: "Exported",
	OutExportedD: "How much loss through exports.",
	OutTribute: "Tribute",
	OutTributeD: "How much loss through paying tribute to warlords or other factions.",
},
game.faction.player.PlayerLevels: {
	mTitle: "New title eared!",
	mMessage: "A new title has been bestowed upon your name. Click the throne for more info.",
	Title: "Title",
	As you grow in might and population, titles will be bestowed upon your name. Titles will unlock great advantages to a ruler.: "As you grow in might and population, titles will be bestowed upon your name. Titles will unlock great advantages to a ruler.",
},
game.faction.player.PlayerResources: {
	demolition: "demolition",
	The amount spent gained by demolishing structures.: "The amount spent gained by demolishing structures.",
	maintenance: "maintenance",
	The amount spent on maintenance.: "The amount spent on maintenance.",
	road upkeep: "road upkeep",
	The amount spent on road upkeep.: "The amount spent on road upkeep.",
	construction: "construction",
	The amount spent on construction.: "The amount spent on construction.",
	spoilage: "spoilage",
	The amount lost due to spoilage.: "The amount lost due to spoilage.",
	Theft: "Theft",
	The amount lost due to theft by your criminals.: "The amount lost due to theft by your criminals.",
},
init.climate.CLIMATES: {
	Cold: "Cold",
	cold_desc: "Very cold winters. Unique crops. Low disease rates.",
	Temperate: "Temperate",
	temp_desc, Varying temperature.: "temp_desc, Varying temperature.",
	Warm: "Warm",
	warm_desc: "Hot summers. Year arround farming",
	Climate: "Climate",
	desc: "Climate zones have a range of bonuses and drawbacks. Most notably temperatures, which can affect your subjects",
},
init.resources.Minable: {
	minable: "{0} Deposits",
},
init.settings.KeyNames: {
	modCtrl: "ctrl",
	modShift: "shift",
	and: " + ",
	???: "???",
	space: "space",
	escape: "escape",
	enter: "enter",
	tab: "tab",
	backspace: "backspace",
	insert: "insert",
	delete: "delete",
	right: "right",
	left: "left",
	down: "down",
	up: "up",
	page-up: "page-up",
	page-down: "page-down",
	home: "home",
	end: "end",
	print-screen: "print-screen",
	left-shift: "left-shift",
	left-ctrl: "left-ctrl",
	right-shift: "right-shift",
	right-ctrl: "right-ctrl",
	F: "F{0}",
},
init.tech.BONUSES: {
	Bonus: "Bonus",
	desc: "Bonuses boosts certain areas of the game.",
	Build: "Build",
	build_desc: "Increases the speed at which your subject build and dismantle buildings.",
	Tunnel: "Tunnel",
	tunnel_desc: "Increases the speed at which your subjects tunnel into mountains.",
	Battle Damage: "Battle Damage",
	damage_desc: "Instruction in form by skilled, albeit old, soldiers increases the amount of damage that our brave warriors can endure from on their opponents in battle.",
	Battle Defence: "Battle Defence",
	defence_desc: " Instruction in form by skilled, albeit old, soldiers increases the amount of damage that our brave warriors inflict on their opponents in battle.",
	Mining: "Mining",
	Mining_desc: "Makes mining in general more efficient",
	Refining: "Refining",
	Refining_desc: "Makes refining in general more efficient",
	Craftsmenship: "Craftsmenship",
	Craftsmenship_desc: "Makes all workshops more efficient",
	Farming: "Farming",
	farming_desc: "Increases output of all farms.",
	Husbandry: "Husbandry",
	husbandry_desc: "Makes breeded animals fatter",
	Hunting: "Hunting",
	hunting_desc: "Allows hunters to collect more resources from wild animals.",
	Fishing: "Fishing",
	fishing_desc: "Allows fishermen to produce more fish.",
	Happiness: "Happiness",
	happiness_desc: "Increases happiness of all your subjects.",
	Morale: "Morale",
	morale_desc: "Increases morale of your soldiers.",
},
settlement.entity.humanoid.ai.crime.Flasher: {
	verb: "Streaking",
},
settlement.entity.humanoid.ai.crime.Murder: {
	verb: "Murdering",
},
settlement.entity.humanoid.ai.crime.Theft: {
	Thieving: "Thieving",
},
settlement.entity.humanoid.ai.crime.Vandalism: {
	name: "Vandalising",
},
settlement.entity.humanoid.ai.prisoner.AIModule_Prisoner: {
	Going into Exile: "Going into Exile",
},
settlement.entity.humanoid.ai.prisoner.Prison: {
	name: "Biding Time",
},
settlement.entity.humanoid.ai.work.WorkGuard: {
	Catching criminal: "Catching criminal",
},
settlement.entity.humanoid.HTYPE: {
	Subject: "Subject",
	Subjects: "Subjects",
	SubjectD: "Subjects are the bulk of your population and will carry out your wishes.",
	Criminal: "Criminal",
	Criminals: "Criminals",
	CriminalD: "Criminals don't work, but spends their days doing mischief. Should be dealt with quickly.",
	Prisoner: "Prisoner",
	Prisoners: "Prisoners",
	PrisonerD: "Prisoners are ex criminals, or other foes who have been caught by your law enforcement. If you have prisons, courts or execution squares, prisoners will go there to await justice.",
	Invador: "Invador",
	Invadors: "Invadors",
	InvadorD: "Invadors is a force bent on conquer your city",
	Nobility: "Nobility",
	Nobles: "Nobles",
	NobilityD: "The nobility are above the commin plebs. Do not work in a traditional sense and require the best of services.",
},
settlement.environment.SettEnvMap: {
	Noise: "Noise",
	noiseD: "Noise travels from noisy rooms out into the open and disturbs your subjects. It's hindered slightly by walls.",
	Lightening: "Lightening",
	lightD: "Light is emittet from torches and makes subject feel safe",
	Awe: "Awe",
	aweD: "Awe is gained from certain monuments and roads and have different effects of your subjects depending on species.",
	Harmony: "Harmony",
	harmonyD: "Harmony is gained from certain monuments and roads and have different effects of your subjects depending on species.",
	Dread: "Dread",
	dreadD: "Dread is gained from certain monuments and roads and have different effects of your subjects depending on species.",
	Law Enforcement: "Law Enforcement",
	lawD: "Law is emitted by guard posts and prevents crime. The guard posts must also be manned in order actually prevent crime.",
},
settlement.environment.SettSquareness: {
	squareness: "squareness",
	desc: "Squareness is the shape of the rooms in your city. Building rectangular rooms increases the value, while shaping them more dynamcially decreases it.",
},
settlement.environment.SettTemp: {
	format: "~",
	Temperature: "Temperature",
	desc: "Temperature is determined by climate, season and chance. Extreme temperatures on either end causes your subjects to be exposed.",
},
settlement.room.food.farm.Gui: {
	cycle: "Cycle",
	tilling: "Tilling",
	tending: "Tending",
	harvest: "Harvesting",
	skill: "Skill",
	daily: "Daily Progress",
},
settlement.room.food.fish.Constructor: {
	problem: "Must not be placed on water",
},
settlement.room.food.pasture.Gui: {
	Animals: "Animals",
	DailyWork: "Daily Tending",
	SlaughterAll: "Slaughter all?",
	SlaughterAllDesc: "Slaughter all animals and immidiately recieve some produce?",
},
settlement.room.industry.mine.MineFactory: {
	itProblem: "Must not be placed on deposits",
},
settlement.room.industry.woodcutter.Constructor: {
	problem: "Must not be placed on trees",
},
settlement.room.infra.export.Gui: {
	Limit: "Exports when over",
	Buyers: "Buyers",
	Stored: "Stored",
	Outbound: "Outbound",
	Orders: "Orders",
},
settlement.room.infra.hauler.Gui: {
	hauled: "hauled",
	fetch: "fetch",
	fetchDesc: "Enabled means resources will also be fetched from other storage depots in your city.",
},
settlement.room.infra.janitor.Gui: {
	Missing: "Missing Resources",
	MissingDesc: "Depending on what is maintained and repaired, certain resources might be required. A janitor will search for these in a radius of 150 tiles and if not found, maintenance work will be much slower.",
	Penalty: "Penalty:",
},
settlement.room.infra.stockpile.Gui: {
	emptyTo: "Empty To:",
	Choose: "Choose Another Warehouse, not one that's already emptying to this warehouse:",
	emptyToDesc: "If there is nothing to collect within the radius, the workers will start delivering non-fetching resources to this other stockpile.",
},
settlement.room.main.job.RoomResDepositOR: {
	accept: "accept",
},
settlement.room.main.RoomCategories: {
	Agriculture: "Agriculture",
	Resources: "Resources",
	Industry: "Industry",
},
settlement.room.main.RoomIsolation: {
	isolation: "isolation",
	desc: "Isolation prevents room degrade and sound pollution. Achieved by surrounding rooms with walls and few doorways",
},
settlement.room.service.kitchen.Gui: {
	use: "Use as ingredient",
},
settlement.stats.STATS: {
	desc: "Miscellaneous statistics about your city. Some affecting your happiness.",
},
settlement.stats.StatsEquippables: {
	Level: "{0} Level",
	Target: "{0} Target",
	Level_desc: "The target number of items each induvidual should equip. Special cases for this is tools, which is set at each industry. Weapons are also set separately for each division.",
	Equipment: "Equipment",
	desc: "Having your subjects equip certain items can boost them in different ways. It can also improve happiness amongst them.",
},
settlement.stats.StatsHappiness: {
	Projection: "Projection",
	p_desc: "What your happiness might be in a couple of days.",
	Happiness: "Happiness",
	happiness_desc: "Immigration will follow if your happiness is above 70%. Emigration will happen if it's below 30%. Happiness is calculated by race. They like different things. The more people that immigrate to your settlement, the higher will their expectations will be. New immigrants have less expectations.",
	Fulfillment: "Fulfillment",
	full_desc: "The current fullfillment is the product of all happiness modifiers multiplied togeather.",
	Expectations: "Expectations",
	exp_desc: "As your population grow, so will your subject's expectations. Expectation is tied to a species occurence in the climate you've chosen to settle and is slightly exponential with growth. Immigrants have less expectation.",
},
settlement.stats.StatsProperties: {
	Species: "Species",
	Boost gained from a subject's species: "Boost gained from a subject's species",
},
settlement.stats.StatsService: {
	Access: "Access",
	AcessDesc: "The level of access this subject has to a service. Can be improved by building more service fascilities and make sure they are close enough for your people to utilize.",
	Quality: "Quality",
	QualityDesc: "The quality of a subjects last visit to theis fascility. Often improved by placing special items in the rooms in question.",
	Distance: "Distance",
	DistanceDesc: "The distance the subject has had to walk to reach service. Having more services spread out mitigates this",
	TotalDesc: "The access and quality this subject group has. Can be improved by building more fascilities, keeping them maintained, and also in some cases building them well.",
	service: "service",
	desc: "Once service rooms are built, subjects will start using them, based on their needs. You can set how often a subject-group is allowed to use the room in particular in the slider. Different races preffer different services at different intervals, and fulfilling these needs will be reflected in your happiness. A subject must be within a radius of 150 tiles to be able to reach a service. Most services can be improved by beeing well furnished.",
},
settlement.stats.StatsStored: {
	desc: "The amount of resources stored per capita",
},
settlement.tilemap.GuiTerrainHoverInfo: {
	fertility: "Fertility",
	Degrade: "Degrade:",
},
view.main.KEY: {
	Scroll-Left: "Scroll-Left",
	Scroll-Right: "Scroll-Right",
	Scroll-Up: "Scroll-Up",
	Scroll-Down: "Scroll-Down",
	Zoom-In: "Zoom-In",
	Zoom-Out: "Zoom-Out",
	Minimap: "Minimap",
	Throne: "Throne/Capitol",
	Rotate: "Rotate",
	Increase: "Increase",
	Decrease: "Decrease",
	Quicksave: "Quicksave",
	Pause: "Pause",
	speed paused: "speed paused",
	speed normal: "speed normal",
	speed fast: "speed fast",
	speed fastest: "speed fastest",
	Slow-Up: "Slow-Up",
	Slow-Down: "Slow-Down",
	Slow-Left: "Slow-Left",
	Slow-Right: "Slow-Right",
	ScreenShot: "ScreenShot",
	Debugger: "Debugger",
	Developer: "Developer",
	Enter: "Enter",
	Back: "Back",
	Escape: "Escape",
	mod: "mod",
	place undo: "place undo",
},
view.sett.ToolDefault: {
	reconstruct: "reconstruct room?",
},
view.sett.ui.race.UIImmigration: {
	aspiring: "Aspiring Immigrants",
	Authorized: "Authorized",
	Authorize: "Authorize",
	Auto Authorize: "Auto Authorize",
	Max: "Max Population",
	prospecting: "Prospecting Immigrants",
	next: "Days until next Immigrant:",
},
view.sett.ui.room.ModuleDegrade: {
	DEGRADE: "Degrade",
	DEGRADE_AVE: "Average degrade amongst these room. Degrade affects a room negativly",
	DEGRADE_DESC: "Degrade affects rooms negativly. Janitors and idle people will maintain rooms. Some maintenance requires materials.",
	Rate: "Rate",
	RateDesc: "All rooms degrade. The degrade can increase further at construction, if the room is big and not supported by inner walls. Lack of isolation also increases degrade.",
},
view.sett.ui.room.ModuleEmployment: {
	EMPLOYEES: "Employees",
	EMPLOYEES_DESC: "Actual employees / Target Employees. When you set the target, unemployed people will soon sign up and start working the room. Without sufficient workers, a room will perform poorly. You can change the priority of workers.",
	WORKLOAD: "Workload",
	WORKLOAD_DESC: "How busy your employees are. If workload is low, it means some of the workers have nothing to do and is waisting their time. If workload is 100%, your workers might have too much to do and the room might need to have more workers allocated.",
	SHIFT_START: "What time the work shift starts",
	SHIFT_NIGHT: "This room is employed all hours of the day.",
	WORKERS_INC: "Workers +{0}",
	WORKERS_DEC: "Workers -{0}",
	WORKERS_NONE: "Insufficient workers available. If there are idle subjects, these will soon sign up and start working",
	WORKERS_INSUFFICIENT: "No workers assigned!",
	WORKERS_INSPECT: "Inspect workers",
	AUTO: "Auto Employ",
	AUTO_DESC: "Let the AI adjust worker amount each day based on workload.",
},
view.sett.ui.room.ModuleIndustry: {
	Production: "Production",
	Production_desc: "The amount of goods that have been produced.",
	Consumption_desc: "consumed",
	Prev: "Prev",
	Prev_desc: "Previous Year",
	NoStorage: "No storage for produce",
	Rate: "Production Rate",
	BaseRate: "Base Rate",
	Degrade: "Degrade",
	RateDesc: "Based on a base rate. Degrade and room efficiency from furnishing is then applied along with technological bonuses. Workmanship from employees is not counted here, but is applied as well. The rate is an indicator how how much produce can be made per day, per worker. The actual produce depends greatly on proximity, layout, work skill and tools.",
	ConsumptionDesc: "Every Produce consumes {0} resources.",
},
view.sett.ui.room.ModuleInstance: {
	ACTIVATE: "Activate",
	DEACTIVATE: "Deactivate",
	UNREACHABLE: "Room is not reachable and will not work properly. Make sure there is a clear path to your throne.",
	DEACTIVATED: "Deactivated!",
},
view.sett.ui.room.ModuleIsolation: {
	bad: "Room poorly isolated",
},
view.sett.ui.room.ModuleRadius: {
	NAME: "Radius",
	PROBLEM: "No work is within the radius!",
	DESC: "Set the work radius of this room. Subjects will look for work within the radius. A big radius can be ineffective and workers will have a hard time getting back to services when work is done.",
},
view.sett.ui.room.ModuleService: {
	NO: "No Available Sevices",
	AVAILABLE: "Available",
	USED: "Currently Used",
	NEEDS: "Needs Work",
	TOTAL: "Total",
	USAGE: "Usage",
	USAGE_DESC: "The load of this service fascility. If load is low, it means there are more services available than are needed. If load is high, it means there are too few to meet demand",
},
view.sett.ui.room.UIRoom: {
	delete: "Are you sure you want to delete this room?",
	NoProblem: "Fully Operational",
},
view.sett.ui.room.UIRoomPlacer: {
	extra: "Extra Expenses",
	extraDesc: "When rooms are built too deep, extra materials must be used to build and maintain it. Support the room with pillars and inner walls, or build it in another shape.",
},
view.tool.PlacableFixedTool: {
	mWheel: "Mouse Wheel",
	increase: "increase",
	decrease: "decrease",
	rotate: "rotate",
},
view.tool.PlacableMorphTool: {
	mWheel: "Mouse Wheel",
	increase: "increase",
	decrease: "decrease",
},
view.tool.PlacableMultiTool: {
	MWheel: "Mouse Wheel",
	increase: "increase",
	decrease: "decrease",
	type: "type",
},
view.ui.UILevel: {
	PopReq: "Population required: ",
	Nobles: "Nobles to appoint: ",
	Regions: "Regions to claim: ",
	Bonuses: "Bonuses: ",
	Status: "Status",
},
view.ui.UIPanelGoods: {
	Stored: "Stored",
	sStored_desc: "stored goods in your warehouses",
	Capacity: "Capacity",
	Capacity_desc: "The amount of storage used.",
	Net: "Net",
	net_desc: "in minus out",
	Name: "Goods",
	Desc: "Your stored goods and some statistics about them.",
},
view.ui.UIPanelGoodsDetail: {
	Stored: "Stored",
	Available: "Available",
	Utilized: "Utilized Storage",
	Capacity: "Storage Capacity",
	SAvailable: "Storage Available",
	Years_Ago: "Years Ago",
},
view.ui.UIPanelTech: {
	CurrentB: "Current",
	MaxB: "Max:",
	Current: "Current",
	Current_desc: "The amount of knowledge stored in your libraries.",
	Capacity: "Capacity",
	Capacity_desc: "The total amount of knowledge that can be stored in your libraries.",
	Spent: "Spent",
	Spent_desc: "The knowledge that is spent on technologies",
	Available: "Available",
	Avail_desc: "Knowledge that can be allocated into technologies.",
	Frozen: "Frozen",
	Frozen_desc: "When a technology is disabled, the knowledge will not become available directly, it will be frozen for some time before it can be used once again.",
	Req: "Requires",
	Allocate_desc: "Are you sure you wish to allocate this technology?",
	Forget_desc: "Are you sure you wish to forget this technology? Knowledge will be frozen for some time.",
	Name: "Knowledge",
	Desc: "Inspect your knowledge levels and unlock technologies",
},
view.ui.UIPanelTrade: {
	Capacity: "Capacity",
	ImportCapacity: "Import Capacity",
	ImportCapacityDesc: "The available space in your delivery depots for import and tribute, minus stored and incoming goods.",
	ImportLevel: "Import Level",
	ImportLevelDesc: " percentage indicating at what storage usage goods will be imported. At a 25% limit, imports will happen when your stockpiles are filled below 25% of their capacity of a given goods.",
	ExportCapacity: "Export Capacity",
	ExportCapacityDesc: "The amount of goods in you export depots that is available to be exported",
	ExportLevel: "Export Level",
	ExportLevelDesc: "A percentage indicating at what storage surplus goods will be exported. Exports will take place if your stockpiles are filled above the percentage given a goods.",
	ImportHover: "Imports will start when warehouse stock is below {0}% / {1} items.",
	ExportHover: "Exports will start when warehouse stock is above {0}% / {1} items.",
	Imports: "Imports",
	Exports: "Exports",
	Name: "Trade",
	Desc: "An overview of your trade",
	Inbound: "Inbound",
	Outbound: "Outbound",
	Importable: "Importable",
	Exportable: "Exportable",
	Amount: "Amount",
	Stored: "Stored",
	buyers: "buyers",
	sellers: "sellers",
	Treasury: "Treasury",
	Toll: "Toll",
	sell price: "sell price",
},
view.ui.UITopPanel: {
	wiki: "wiki",
	developer-tools: "developer-tools",
	menu: "menu",
},
view.world.editor.EditorLandmark: {
	Region: "Region",
	Centre: "Move Centre",
	Find: "Find Region",
	Id: "Id Region",
},
view.world.editor.EditorRegion: {
	Region: "Region",
	Centre: "Move Centre",
	Find: "Find Region",
	Id: "Id Region",
},
view.world.editor.WorldViewEditor: {
	name: "Editor",
},
view.world.IPanelWorld: {
	Factions: "Factions",
	Regions: "Regions",
	might: "Your might. Just the same as your population for now. Used to claim regions",
	knowledge: "knowledge",
	go to capitol: "go to capitol",
	developer tools: "developer tools",
},
view.world.ui.UIFactionDetail: {
	Subjects: "Subjects",
	Citizens: "Citizens",
	Area: "Area",
	Credits: "Credits",
	bnp: "bnp",
	Index: "Index",
	Reachable: "Reachable",
},
view.world.ui.UIFactionDetailMarket: {
	sell: "sell",
	buy: "buy",
},
view.world.ui.UIFactionList: {
	reachable: "This realm is reachable and can be traded with.",
	unreachable: "This realm is too distant to interract with.",
	Population: "Population",
	filter name: "filter name",
	Factions: "Factions",
},
view.world.ui.UIRegion: {
	population: "population",
	ruler: "ruler",
	none: "none",
},
view.world.ui.UIRegionDetail: {
	none: "none",
	population: "population",
	area: "area",
	distance: "distance",
	ruler: "ruler",
	name: "name",
	marked: "marked",
},
view.world.ui.UIRegionDetailE: {
	CurrentValueDesc: "Higher potential gives higher yield when taxed. This potential can diminish with time if you decide to exhaust the resource, or if the resource is non-renewable.",
	CurrentValue: "current deposits: ",
	CurrentBase: "base deposits: ",
	Renewable: "Renewable resources does not diminish except if you choose to exhaust them, in which case they will slowly regrow to to their base value once you stop doing so.",
	RenewableNon: "Non renewable resources dimishes in time, but there can randomly be new findings of deposits, which you will be notified about.",
	Focus: "Current focus of total tax. Note that this is slightly exponential, meaning that it's opimal to put all focus on a single resource. It takes some time to adjust focus. Effective focus is at: ",
	Output: "estimated output / day",
	Exhaust: "Exhaust. Harvest this resource at x1.5 speed, but use up deposits x3 faster.",
	Tax: "Current taxation. The more you tax, the higher the output of your resources. Taxation currently has no negative effects, so put it at max. It takes awhile for the actual taxation to change though.",
	TaxCurrent: "Effective Tax: ",
	require: "You can't actually tax this region yet. Improve your repuation in order to do so.",
	Claim!: "Claim!",
	taxes: "taxes",
	Tax Distribution: "Tax Distribution",
},
view.world.ui.UIRegionList: {
	filter name: "filter name",
	Regions: "Regions",
},
view.world.WorldViewGenerator: {
	Fertility: "Fertility",
	Forest: "Forest",
	Mountain: "Mountain",
	Water: "Water",
	Region: "Region",
	Settlement: "Settlement",
	Generating: "Generating Factions...",
	place: "Place Capitol",
	Regenerate: "Regenerate",
	SpecialRooms: "Disabled rooms",
},
world.entity.capitol.Capitol: {
	Pop: "Population",
},
world.entity.caravan.Shipment: {
	NAME_SHIPMENT: "Shipment",
	NAME_TRADE: "Trade Caravan",
	Bound: "Bound for City of {0}",
},
world.map.region.GeneratorInit: {
	Island: "Island",
},
world.map.region.Realm: {
	Other: "Belongs to another realm",
	TooFar: "Too distant to claim",
	Requires: "Requires a higher reputation to claim. Improve your reputation.",
},
menu.GUI: {
	back: "< back",
},
menu.Intro: {
	1: "This is a EA and not a complete game, nor a complete demo.",
	2: "That means a lot of visual placeholders and unfinished, missing or broken features.%r%",
	3: "Feedback is much welcome!",
},
menu.Menu: {
	loading: "loading...",
},
menu.ScCampaign: {
	name: "campaigns",
	continue: "continue campaign",
},
menu.ScCredits: {
	name: "contributions",
},
menu.ScExamples: {
	name: "examples",
	load: "load",
},
menu.ScHallFame: {
	name: "hall of fame",
	nobility: "nobility",
	knights: "knights",
	citizens: "citizens",
},
menu.ScHallHeroes: {
	name: "hall of heroes",
},
menu.ScHallLegends: {
	name: "hall of legends",
},
menu.ScKeys: {
	name: "key settings",
	unassigned: "not assigned!",
	press: "press key / ctrl+key / alt+key!",
	apply: "apply",
	revert: "revert",
	restore: "restore",
},
menu.ScLoad: {
	name: "load",
	load: "load",
	delete: "delete",
	sure: "Are you sure you wish to delete?",
	no: "no",
},
menu.ScMain: {
	play: "play",
	continue: "continue",
	settings: "settings",
	credits: "credits",
	quit: "quit",
	tutorial: "tutorial",
	keyboard: "keyboard",
	options: "options",
},
menu.ScOptions: {
	name: "settings",
},
menu.ScRandom: {
	name: "random game",
	go!: "go!",
	faction name: "faction name",
	color: "color",
},
